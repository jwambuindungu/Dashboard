<?php

namespace app\modules\smis\models;

use Yii;
use yii\db\ActiveRecord;
use yii\db\Query;

class SMIS extends ActiveRecord
{
    /**
     * @inheritdoc
     */
    // public static function tableName()
    // {
        // return 'P15_2680_94.DASH_TS_NTS';
    // }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
   public static function getDb()
    {
        return \Yii::$app->get('muthoni_orcl');
    }
    /**
     * @param string $schema_name
     * @return mixed
     *
     * @deprecated
     */
	 public static function GET_STUDENTS_INSESSION($yr='')
    {
        if(empty($yr)){
            $y = SMIS::APPRAISAL_YEARLIST();
            $yr = $y[0]['yr'];
        }
		// Check evaluation upto to supervisor evaluation without considering supervisor comments
		$db = self::getDb();
		$sql=" SELECT
				DEGREE_PROGRAMMES.DEGREE_CODE
				FROM
				MUTHONI.DEGREE_PROGRAMMES
				INNER JOIN MUTHONI.FACULTIES ON DEGREE_PROGRAMMES.FACUL_FAC_CODE = FACULTIES.FAC_CODE
				WHERE
				FACULTIES.COL_CODE = 'CAVS'
				ORDER BY
				FACULTIES.COL_CODE ASC";
			$model = $db->createCommand($sql);
		$data = $model->queryAll();
		
        return $data;
    }

    public static function APP_INTAKE($intake='')
    {
		$db = self::getDb();
		$sql="SELECT COLLEGES.COL_CODE,
			COUNT(APPLICANT.APPLICATION_NO) AS APPLICANTS, 
			SUM(CASE WHEN APPLICANT.STATUS = 'PENDING' THEN 1 ELSE 0 END) AS PENDING_VERIFICATION,
			SUM(CASE WHEN APPLICANT.STATUS = 'UNVERIFIED' OR APPLICANT.STATUS = 'FOLLOW-UP' THEN 1 ELSE 0 END) AS UNVERIFIED,
			SUM(CASE WHEN APPLICANT.STATUS = 'VERIFIED' OR APPLICANT.STATUS = 'ADMISSABLE' OR APPLICANT.STATUS = 'NOT ADMISSABLE' THEN 1 ELSE 0 END) AS VERIFIED,
			SUM(CASE WHEN APPLICANT.FACULTY_STATUS = 'SHORTLISTED' THEN 1 ELSE 0 END) AS SHORTLISTED,
			SUM(CASE WHEN APPLICANT.FACULTY_STATUS = 'NOT SHORTLISTED' THEN 1 ELSE 0 END) AS NOT_SHORTLISTED,
			SUM(CASE WHEN APPLICANT.FACULTY_STATUS = '' THEN 1 ELSE 0 END) AS PENDING_SHORTLISTING,
			SUM(CASE WHEN APPLICANT.STATUS = 'ADMISSABLE' THEN 1 ELSE 0 END) AS ADMITTED,
			SUM(CASE WHEN APPLICANT.STATUS = 'NOT ADMISSABLE' THEN 1 ELSE 0 END) AS NOT_ADMITTED,
			SUM(CASE WHEN APPLICANT.APPROVE_PUBLISH = '1' THEN 1 ELSE 0 END) AS LETTER_PUBLISHED,
			COUNT(UON_STUDENTS.INDEX_NUMBER) AS REPORTED
			
			FROM MUTHONI.APPLICANT, MUTHONI.COLLEGES, MUTHONI.FACULTIES, MUTHONI.DEGREE_PROGRAMMES, MUTHONI.APPLICATION_INTAKE, MUTHONI.UON_STUDENTS
			WHERE APPLICANT.INTAKE = APPLICATION_INTAKE.INTAKE_CODE
			AND APPLICATION_INTAKE.DEGREE_CODE = DEGREE_PROGRAMMES.DEGREE_CODE
			-- AND (UPPER(MUTHONI.DEGREE_PROGRAMMES.DEGREE_TYPE) IN ('MASTERS', 'PGDIP', 'PH.D','FELLOWSHIP'))
			AND DEGREE_PROGRAMMES.FACUL_FAC_CODE = FACULTIES.FAC_CODE
			AND FACULTIES.COL_CODE = COLLEGES.COL_CODE
			AND APPLICANT.APPLICATION_NO = UON_STUDENTS.INDEX_NUMBER(+)
			AND APPLICATION_INTAKE.INTAKE_NAME LIKE '$intake%'
			GROUP BY COLLEGES.COL_CODE
			ORDER BY COLLEGES.COL_CODE";
        $model = $db->createCommand($sql);
		$data = $model->queryAll();
        return $data;
    }
    public static function ACA_YEAR()
    {
        $db = self::getDb();
        $sql="SELECT DISTINCT ACADEMIC_YEAR, INTAKE_NAME
            FROM MUTHONI.APPLICATION_INTAKE ORDER BY ACADEMIC_YEAR DESC";
        $model = $db->createCommand($sql);
        $data = $model->queryAll();

        return $data;
    }
	
	     public static function ACADEMIC_YEAR()
   {
        $db = self::getDb();
        $sql="SELECT DISTINCT(MUTHONI.ACADEMIC_YEAR_PROGRESS.ACADEMIC_YEAR)
				FROM MUTHONI.ACADEMIC_YEAR_PROGRESS
				WHERE MUTHONI.ACADEMIC_YEAR_PROGRESS.ACADEMIC_YEAR IS NOT NULL
				ORDER BY ACADEMIC_YEAR_PROGRESS.ACADEMIC_YEAR DESC";
        $model = $db->createCommand($sql);
        $data = $model->queryAll();

        return $data;
    }

    public static function APPRAISAL_YEARLIST()
    {
        $lYr = 2000;
        $currDay = date('j');
        $currMon = date('n');
        $currYr = date('Y')-1;
        $yList = [];

        if($currMon > 6){
            $currYr++;
        }
        $tz=0;
        for($i=$currYr;$i>=$lYr;$i--){
            $yList[]=['yr'=>($i-1)."/".$i];
        }
        return $yList;
    }
	
	// this function gives fees within cerain period
	public static function PERIODIC_FEES($range=[])
	{
	    $add = '';
	    if(!empty($range)){
            $add = " AND FEE_PAYMENTS.TRANS_DATE BETWEEN '".$range[0]."' AND '".$range[1]."'";
        }
		$db = self::getDb();
		$sql="SELECT ALL MUTHONI.FACULTIES.COL_CODE,  
					SUM(MUTHONI.FEE_PAYMENTS.TRANS_AMOUNT *NVL(MUTHONI.FEE_PAYMENTS.EXCHANGE_RATE,1)) SUM_AMOUNTS
					FROM MUTHONI.UON_STUDENTS, 
					MUTHONI.DEGREE_PROGRAMMES, MUTHONI.FACULTIES, MUTHONI.FEE_PAYMENTS
					WHERE 
						NVL(MUTHONI.FEE_PAYMENTS.RECEIPT_STATUS, 'X')<>'CANCELLED'
						AND  ((MUTHONI.UON_STUDENTS.D_PROG_DEGREE_CODE=MUTHONI.DEGREE_PROGRAMMES.DEGREE_CODE)
						AND (MUTHONI.DEGREE_PROGRAMMES.FACUL_FAC_CODE=MUTHONI.FACULTIES.FAC_CODE)
						AND (MUTHONI.FEE_PAYMENTS.REG_NUMBER=MUTHONI.UON_STUDENTS.REGISTRATION_NUMBER))
						$add
						GROUP BY MUTHONI.FACULTIES.COL_CODE ";
		
		$model = $db->createCommand($sql);
		$data = $model->queryAll();
		
        return $data;
	}
	
	public static function FOREIGN_STUDENTS($acadamic_year, $sql='')
    {
		 
		$db = self::getDb();
		
		$sql="SELECT ALL
				COUNT(MUTHONI.UON_STUDENTS.REGISTRATION_NUMBER) AS STUDENT_COUNT,
				MUTHONI.FACULTIES.COL_CODE,
				MUTHONI.COLLEGES.COL_NAME
				FROM MUTHONI.COUNTRIES, MUTHONI.UON_STUDENTS, MUTHONI.DEGREE_PROGRAMMES, 
				MUTHONI.ACADEMIC_YEAR_PROGRESS, MUTHONI.LEVEL_OF_STUDY,MUTHONI.FACULTIES,MUTHONI.COLLEGES
				WHERE MUTHONI.ACADEMIC_YEAR_PROGRESS.ACADEMIC_YEAR='$acadamic_year'
				AND MUTHONI.COUNTRIES.COUNTRY_CODE NOT IN('001','1')
				AND  ((MUTHONI.UON_STUDENTS.CIT_COUNTRY_CODE=MUTHONI.COUNTRIES.COUNTRY_CODE)
				AND (MUTHONI.UON_STUDENTS.D_PROG_DEGREE_CODE=MUTHONI.DEGREE_PROGRAMMES.DEGREE_CODE)
				AND (MUTHONI.DEGREE_PROGRAMMES.FACUL_FAC_CODE = MUTHONI.FACULTIES.FAC_CODE)
				AND  (MUTHONI.FACULTIES.COL_CODE= MUTHONI.COLLEGES.COL_CODE)
				AND (MUTHONI.UON_STUDENTS.REGISTRATION_NUMBER=MUTHONI.ACADEMIC_YEAR_PROGRESS.REGISTRATION_NUMBER)
				AND (MUTHONI.ACADEMIC_YEAR_PROGRESS.LEVEL_OF_STUDY=MUTHONI.LEVEL_OF_STUDY.LEVEL_OF_STUDY))
				GROUP BY MUTHONI.FACULTIES.COL_CODE,MUTHONI.COLLEGES.COL_NAME";
        $model = $db->createCommand($sql);
		$data = $model->queryAll();
        return $data;
    }
	
	public static function GRADUANDS_BALANCES($acadamic_year, $sql='')
    {
		 
		$db = self::getDb();
		
		$sql="SELECT ALL
			MUTHONI.FACULTIES.COL_CODE,
			MUTHONI.COLLEGES.COL_NAME,
			SUM (MUTHONI.UON_STUDENT_VIEW_ALL.DEBIT - MUTHONI.UON_STUDENT_VIEW_ALL.CREDIT) AS BALANCES
		FROM
			MUTHONI.GRADUANDS,MUTHONI.FACULTIES,MUTHONI.COLLEGES,MUTHONI.UON_STUDENT_VIEW_ALL,
			MUTHONI.DEGREE_PROGRAMMES, MUTHONI.STUDENTS_INFORMATION
		WHERE(MUTHONI.UON_STUDENT_VIEW_ALL.DEBIT - MUTHONI.UON_STUDENT_VIEW_ALL.CREDIT > 0
			AND MUTHONI.GRADUANDS.ACADEMIC_YEAR = '$acadamic_year')
			AND ((MUTHONI.UON_STUDENT_VIEW_ALL.REGISTRATION_NUMBER = MUTHONI.GRADUANDS.REGISTRATION_NUMBER)
			AND (MUTHONI.GRADUANDS.DEG_CODE = MUTHONI.DEGREE_PROGRAMMES.DEGREE_CODE)
			AND (MUTHONI.FACULTIES.COL_CODE = MUTHONI.COLLEGES.COL_CODE)
			AND (MUTHONI.DEGREE_PROGRAMMES.FACUL_FAC_CODE = MUTHONI.FACULTIES.FAC_CODE)
			AND (MUTHONI.UON_STUDENT_VIEW_ALL.REGISTRATION_NUMBER = MUTHONI.STUDENTS_INFORMATION.REGISTRATION_NUMBER (+)))
		GROUP BY
			MUTHONI.FACULTIES.COL_CODE,
			MUTHONI.COLLEGES.COL_NAME";
        $model = $db->createCommand($sql);
		$data = $model->queryAll();
        return $data;
    }
	public static function PROGRAMME_GRADUANDS($acadamic_year, $sql='')
    {
		 
		$db = self::getDb();
		
		$sql="SELECT	MUTHONI.DEGREE_PROGRAMMES.DEGREE_TYPE, 
						COUNT(MUTHONI.GRADUANDS.REGISTRATION_NUMBER) AS GRADUANDS
						FROM MUTHONI.GRADUANDS, MUTHONI.DEGREE_PROGRAMMES, MUTHONI.FACULTIES
						WHERE (TO_DATE(MUTHONI.GRADUANDS.GRADUATION_DATE)=TO_DATE('06-DEC-2013')
						AND UPPER(NVL(MUTHONI.GRADUANDS.RESULT, 'PASS'))='PASS')
						AND  ((MUTHONI.DEGREE_PROGRAMMES.FACUL_FAC_CODE=MUTHONI.FACULTIES.FAC_CODE)
						AND (MUTHONI.GRADUANDS.DEG_CODE=MUTHONI.DEGREE_PROGRAMMES.DEGREE_CODE))
						GROUP BY  MUTHONI.DEGREE_PROGRAMMES.DEGREE_TYPE";
        $model = $db->createCommand($sql);
		$data = $model->queryAll();
        return $data;
    }
		public static function GRADUATION_DATE($acadamic_year, $sql='')
    {
		 
		$db = self::getDb();
		
		$sql="SELECT	MUTHONI.DEGREE_PROGRAMMES.DEGREE_TYPE, 
						COUNT(MUTHONI.GRADUANDS.REGISTRATION_NUMBER) AS GRADUANDS
						FROM MUTHONI.GRADUANDS, MUTHONI.DEGREE_PROGRAMMES, MUTHONI.FACULTIES
						WHERE (TO_DATE(MUTHONI.GRADUANDS.GRADUATION_DATE)=TO_DATE('23-AUG-2013')
						AND UPPER(NVL(MUTHONI.GRADUANDS.RESULT, 'PASS'))='PASS')
						AND  ((MUTHONI.DEGREE_PROGRAMMES.FACUL_FAC_CODE=MUTHONI.FACULTIES.FAC_CODE)
						AND (MUTHONI.GRADUANDS.DEG_CODE=MUTHONI.DEGREE_PROGRAMMES.DEGREE_CODE))
						GROUP BY  MUTHONI.DEGREE_PROGRAMMES.DEGREE_TYPE";
        $model = $db->createCommand($sql);
		$data = $model->queryAll();
        return $data;
    }
}